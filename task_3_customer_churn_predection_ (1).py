# -*- coding: utf-8 -*-
"""task 3 customer churn predection .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B98eHt2cv-BbQLhp0hr-7R7S5vqeriuz

Task 3:Develop a model to predict customer churn for a subscriptionbased service or business. Use historical customer data, including
features like usage behavior and customer demographics, and try
algorithms like Logistic Regression, Random Forests, or Gradient
Boosting to predict churn.

Loading Libraries and Datasets
"""

from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, roc_curve, auc
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import pandas as pd
import warnings
import nltk
nltk.download('stopwords')
warnings.filterwarnings("ignore")

"""reading csv file

"""

df=pd.read_csv('/content/Churn_Modelling.csv')
df

"""data is clear"""

df.info()

"""three countries

"""

df["Geography"].unique()

df.describe()

"""deleted colunms

"""

df.drop(columns=['RowNumber','CustomerId','Surname'],inplace=True)
df

labelencoder=LabelEncoder()
df['Gender']=labelencoder.fit_transform(df['Gender'])
df['Geography']=labelencoder.fit_transform(df['Geography'])
df

"""data is ready now"""

df.dtypes

x=df.drop(columns='Exited') # droping coulmn from the feature
y=df['Exited']

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,shuffle=True,random_state=40)

model=RandomForestClassifier()
model.fit(x_train,y_train)

model.score(x_train,y_train)

y_pred = model.predict(x_test)
y_pred

len(y_pred)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy: {:.2f}%".format(accuracy * 100))

"""visulaziation

"""

y_prob = model.predict_proba(x_test)[:, 1]
fpr, tpr, thresholds = roc_curve(y_test, y_prob)

plt.figure(figsize=(10, 5))
plt.plot(fpr, tpr, color='blue', lw=2)
plt.plot([0, 1], [0, 1], color='black', lw=2)
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('RandomForestClassifier\nAccuracy: {:.2f}%'.format(accuracy * 100))
plt.show()